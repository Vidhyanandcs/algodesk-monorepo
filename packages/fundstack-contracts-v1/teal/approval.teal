#pragma version 5
callsub sub2
bnz main_l25
callsub sub3
bnz main_l24
callsub sub4
bnz main_l23
callsub sub5
bnz main_l22
txna ApplicationArgs 0
byte "fund_escrow"
==
bnz main_l21
txna ApplicationArgs 0
byte "invest"
==
bnz main_l17
txna ApplicationArgs 0
byte "investor_claim"
==
bnz main_l16
txna ApplicationArgs 0
byte "investor_withdraw"
==
bnz main_l15
txna ApplicationArgs 0
byte "owner_claim"
==
bnz main_l12
txna ApplicationArgs 0
byte "owner_withdraw"
==
bnz main_l11
err
main_l11:
global GroupSize
int 1
==
assert
txna Assets 0
byte "aid"
app_global_get
==
assert
global Round
byte "ca"
app_global_get
>
assert
byte "tr"
app_global_get
int 0
==
assert
txn Sender
byte "c"
app_global_get
==
assert
byte "fw"
app_global_get
int 0
==
assert
itxn_begin
int axfer
itxn_field TypeEnum
byte "aid"
app_global_get
itxn_field XferAsset
txn Sender
itxn_field AssetReceiver
byte "ta"
app_global_get
int 0
callsub sub6
*
itxn_field AssetAmount
itxn_submit
byte "fw"
int 1
app_global_put
int 1
return
main_l12:
global GroupSize
int 1
==
assert
int 0
txna ApplicationArgs 1
btoi
|
int 1
==
assert
txna Assets 0
byte "aid"
app_global_get
==
assert
global Round
byte "ca"
app_global_get
>
assert
byte "s"
app_global_get
int 2
==
assert
byte "tr"
app_global_get
int 1
==
assert
txn Sender
byte "c"
app_global_get
==
assert
byte "fc"
app_global_get
int 0
==
assert
itxn_begin
int pay
itxn_field TypeEnum
txn Sender
itxn_field Receiver
byte "ta"
app_global_get
byte "ra"
app_global_get
-
byte "sr"
app_global_get
/
callsub sub9
itxn_field Amount
itxn_submit
byte "fc"
int 1
app_global_put
txna ApplicationArgs 1
btoi
int 0
==
bnz main_l14
main_l13:
int 1
return
main_l14:
itxn_begin
int axfer
itxn_field TypeEnum
byte "aid"
app_global_get
itxn_field XferAsset
txn Sender
itxn_field AssetReceiver
byte "ra"
app_global_get
int 0
callsub sub6
*
itxn_field AssetAmount
itxn_submit
b main_l13
main_l15:
global GroupSize
int 1
==
assert
global Round
byte "ca"
app_global_get
>
assert
byte "s"
app_global_get
int 2
==
assert
byte "tr"
app_global_get
int 0
==
assert
int 0
byte "r"
app_local_get
int 1
==
assert
int 0
byte "i"
app_local_get
int 1
==
assert
int 0
byte "w"
app_local_get
int 0
==
assert
itxn_begin
int pay
itxn_field TypeEnum
txn Sender
itxn_field Receiver
int 0
byte "ia"
app_local_get
byte "sr"
app_global_get
/
callsub sub9
itxn_field Amount
itxn_submit
byte "now"
byte "now"
app_global_get
int 1
+
app_global_put
int 0
byte "w"
int 1
app_local_put
int 1
return
main_l16:
global GroupSize
int 1
==
assert
txna Assets 0
byte "aid"
app_global_get
==
assert
global Round
byte "ca"
app_global_get
>
assert
byte "s"
app_global_get
int 2
==
assert
byte "tr"
app_global_get
int 1
==
assert
int 0
byte "r"
app_local_get
int 1
==
assert
int 0
byte "i"
app_local_get
int 1
==
assert
int 0
byte "c"
app_local_get
int 0
==
assert
itxn_begin
int axfer
itxn_field TypeEnum
byte "aid"
app_global_get
itxn_field XferAsset
txn Sender
itxn_field AssetReceiver
int 0
byte "ia"
app_local_get
int 0
callsub sub6
*
itxn_field AssetAmount
itxn_submit
byte "noc"
byte "noc"
app_global_get
int 1
+
app_global_put
int 0
byte "c"
int 1
app_local_put
int 1
return
main_l17:
global GroupSize
int 2
==
assert
txn GroupIndex
int 1
==
assert
gtxn 0 TypeEnum
int pay
==
assert
gtxn 0 Amount
int 0
>
assert
gtxn 0 Amount
callsub sub8
int 1
%
int 0
==
assert
gtxn 0 Sender
txn Sender
==
assert
gtxn 0 Receiver
global CurrentApplicationAddress
==
assert
int 0
byte "r"
app_local_get
int 1
==
assert
int 0
byte "i"
app_local_get
int 0
==
assert
byte "s"
app_global_get
int 2
==
assert
gtxn 0 Amount
callsub sub8
byte "sr"
app_global_get
*
byte "mia"
app_global_get
>=
assert
gtxn 0 Amount
callsub sub8
byte "sr"
app_global_get
*
byte "mxa"
app_global_get
<=
assert
global Round
byte "ssat"
app_global_get
>=
assert
global Round
byte "seat"
app_global_get
<=
assert
byte "ra"
app_global_get
gtxn 0 Amount
callsub sub8
byte "sr"
app_global_get
*
>=
assert
byte "noi"
byte "noi"
app_global_get
int 1
+
app_global_put
byte "ra"
byte "ra"
app_global_get
gtxn 0 Amount
callsub sub8
byte "sr"
app_global_get
*
-
app_global_put
byte "tr"
byte "ta"
app_global_get
byte "ra"
app_global_get
-
gtxn 0 Amount
callsub sub8
byte "sr"
app_global_get
*
+
byte "ta"
app_global_get
/
int 100
*
int 50
>=
bnz main_l20
int 0
main_l19:
app_global_put
int 0
byte "i"
int 1
app_local_put
int 0
byte "ia"
gtxn 0 Amount
callsub sub8
byte "sr"
app_global_get
*
app_local_put
int 1
return
main_l20:
int 1
b main_l19
main_l21:
global GroupSize
int 3
==
assert
txn GroupIndex
int 1
==
assert
txna Assets 0
byte "aid"
app_global_get
==
assert
gtxn 0 Sender
byte "c"
app_global_get
==
assert
gtxn 0 Sender
txn Sender
==
assert
gtxn 0 TypeEnum
int pay
==
assert
gtxn 0 Receiver
global CurrentApplicationAddress
==
assert
gtxn 0 Amount
int 2000000
==
assert
gtxn 2 Sender
byte "c"
app_global_get
==
assert
gtxn 2 Sender
txn Sender
==
assert
gtxn 2 TypeEnum
int axfer
==
assert
gtxn 2 AssetReceiver
global CurrentApplicationAddress
==
assert
gtxn 2 XferAsset
byte "aid"
app_global_get
==
assert
gtxn 2 AssetAmount
byte "ta"
app_global_get
==
assert
txn Sender
byte "c"
app_global_get
==
assert
global Round
byte "rsat"
app_global_get
<
assert
byte "s"
app_global_get
int 1
==
assert
itxn_begin
int axfer
itxn_field TypeEnum
byte "aid"
app_global_get
itxn_field XferAsset
byte "e"
app_global_get
itxn_field AssetReceiver
int 0
itxn_field AssetAmount
itxn_submit
byte "s"
int 2
app_global_put
int 1
return
main_l22:
global GroupSize
int 1
==
assert
int 0
byte "r"
app_local_get
int 0
==
assert
byte "s"
app_global_get
int 2
==
assert
global Round
byte "rsat"
app_global_get
>=
assert
global Round
byte "reat"
app_global_get
<=
assert
byte "nor"
byte "nor"
app_global_get
int 1
+
app_global_put
int 0
byte "r"
int 1
app_local_put
int 0
byte "i"
int 0
app_local_put
int 0
byte "c"
int 0
app_local_put
int 0
byte "ia"
int 0
app_local_put
int 1
return
main_l23:
byte "s"
app_global_get
int 1
==
assert
int 1
return
main_l24:
callsub sub7
return
main_l25:
global GroupSize
int 1
==
assert
txna ApplicationArgs 0
byte ""
!=
assert
txna ApplicationArgs 2
btoi
global Round
>
assert
txna ApplicationArgs 3
btoi
txna ApplicationArgs 2
btoi
>
assert
txna ApplicationArgs 4
btoi
txna ApplicationArgs 3
btoi
>
assert
txna ApplicationArgs 5
btoi
txna ApplicationArgs 4
btoi
>
assert
txna ApplicationArgs 7
btoi
int 0
>
assert
txna ApplicationArgs 8
btoi
txna ApplicationArgs 7
btoi
>=
assert
txna ApplicationArgs 6
btoi
txna ApplicationArgs 8
btoi
>=
assert
txna ApplicationArgs 9
btoi
int 0
>
assert
txna ApplicationArgs 9
btoi
txna ApplicationArgs 8
btoi
<=
assert
byte "v"
int 1
app_global_put
byte "s"
int 1
app_global_put
byte "c"
txn Sender
app_global_put
byte "cat"
global Round
app_global_put
byte "n"
txna ApplicationArgs 0
app_global_put
byte "cd"
txn TxID
app_global_put
byte "aid"
txna ApplicationArgs 1
btoi
app_global_put
byte "rsat"
txna ApplicationArgs 2
btoi
app_global_put
byte "reat"
txna ApplicationArgs 3
btoi
app_global_put
byte "ssat"
txna ApplicationArgs 4
btoi
app_global_put
byte "seat"
txna ApplicationArgs 5
btoi
app_global_put
byte "ca"
txna ApplicationArgs 5
btoi
app_global_put
byte "ta"
txna ApplicationArgs 6
btoi
app_global_put
byte "ra"
txna ApplicationArgs 6
btoi
app_global_put
byte "mia"
txna ApplicationArgs 7
btoi
app_global_put
byte "mxa"
txna ApplicationArgs 8
btoi
app_global_put
byte "sr"
txna ApplicationArgs 9
btoi
app_global_put
byte "nor"
int 0
app_global_put
byte "noi"
int 0
app_global_put
byte "noc"
int 0
app_global_put
byte "now"
int 0
app_global_put
byte "e"
global CurrentApplicationAddress
app_global_put
byte "fc"
int 0
app_global_put
byte "fw"
int 0
app_global_put
byte "tr"
int 0
app_global_put
int 1
return
sub0: // getAppId
txn ApplicationID
retsub
sub1: // getTxnAction
txn OnCompletion
retsub
sub2: // isCreate
callsub sub0
int 0
==
retsub
sub3: // isUpdate
callsub sub1
int UpdateApplication
==
retsub
sub4: // isDelete
callsub sub1
int DeleteApplication
==
retsub
sub5: // isOptIn
callsub sub1
int OptIn
==
retsub
sub6: // getAssetMicros
store 0
load 0
asset_params_get AssetDecimals
store 1
store 2
int 10
load 2
exp
retsub
sub7: // allowOperation
int 1
int 1
==
retsub
sub8: // microAlgoToAlgo
store 3
load 3
int 1000000
/
retsub
sub9: // AlgoToMicroAlgo
store 4
load 4
int 1000000
*
retsub