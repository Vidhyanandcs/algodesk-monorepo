{"version":3,"sources":["redux/actions/snackbar.ts","components/App/App.tsx","utils/theme.ts","redux/store.ts","index.tsx"],"names":["snackbarSlice","createSlice","name","initialState","show","message","severity","reducers","state","action","payload","hide","actions","App","snackbar","useSelector","console","log","dispatch","useDispatch","className","Button","color","variant","onClick","Snackbar","open","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","Alert","theme","createTheme","typography","button","textTransform","fontFamily","palette","primary","main","secondary","store","configureStore","reducer","snackbarReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAeaA,EAAgBC,YAAY,CACrCC,KAAM,WACNC,aAR2B,CAC3BC,MAAM,EACNC,QAAS,GACTC,SAAU,QAMVC,SAAU,CACNH,KAAM,SAACI,EAAOC,GACVD,EAAMJ,MAAO,EACbI,EAAMH,QAAUI,EAAOC,QAAQL,QAC/BG,EAAMF,SAAWG,EAAOC,QAAQJ,UAEpCK,KAAM,SAACH,GACHA,EAAMJ,MAAO,EACbI,EAAMH,QAAU,GAChBG,EAAMF,SAAW,WAKtB,EAAuBN,EAAcY,QAA7BR,EAAR,EAAQA,KAAMO,EAAd,EAAcA,KACNX,IAAf,Q,gBCYea,MArCf,WACI,IAAMC,EAAWC,aAAY,SAACP,GAAD,OAAsBA,EAAMM,YACzDE,QAAQC,IAAIH,GACZ,IAAMI,EAAWC,cAEnB,OACI,sBAAKC,UAAU,WAAf,UACI,cAACC,EAAA,EAAD,CAAQC,MAAO,UAAWC,QAAS,WAAYC,QAAS,WACpDN,EAASd,EAAK,CACVE,SAAU,UACVD,QAAS,YAHjB,kBAMA,cAACgB,EAAA,EAAD,CAAQC,MAAO,YAAaE,QAAS,WACjCN,EAASd,EAAK,CACVE,SAAU,OACVD,QAAS,cAHjB,oBAOA,cAACoB,EAAA,EAAD,CACIC,KAAMZ,EAASV,KACfuB,aAAc,CAAEC,SAAU,MACtBC,WAAY,UAChBC,iBAAkB,IAAMC,QAAS,WAAOpB,KAJ5C,SAKI,cAACqB,EAAA,EAAD,CACI1B,SAAUQ,EAASR,SACnByB,QAAS,WAAOpB,KAFpB,SAGKG,EAAST,gB,gBClCf4B,EAAQC,YAAY,CAC7BC,WAAY,CACRC,OAAQ,CACJC,cAAe,OACfC,WAAY,kBAGpBC,QAAS,CACLC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,cCXLE,EAAQC,YAAe,CAChCC,QAAS,CACL/B,SAAUgC,KCIlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACI,cAAC,IAAD,CAAkBV,MAAOA,EAAzB,SACI,cAAC,EAAD,UAIZiB,SAASC,eAAe,W","file":"static/js/main.5e3d4277.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport {Color} from \"@material-ui/lab\";\n\nexport interface Snackbar {\n    show: boolean,\n    message: string,\n    severity: Color\n}\n\nconst initialState: Snackbar = {\n    show: false,\n    message: '',\n    severity: 'info'\n}\n\nexport const snackbarSlice = createSlice({\n    name: 'snackbar',\n    initialState,\n    reducers: {\n        show: (state, action: PayloadAction<any>) => {\n            state.show = true;\n            state.message = action.payload.message;\n            state.severity = action.payload.severity;\n        },\n        hide: (state) => {\n            state.show = false;\n            state.message = '';\n            state.severity = 'info';\n        }\n    },\n});\n\nexport const { show, hide } = snackbarSlice.actions\nexport default snackbarSlice.reducer","import React from 'react';\nimport './App.scss';\nimport {Button, Snackbar} from \"@material-ui/core\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"../../redux/store\";\nimport {show, hide} from '../../redux/actions/snackbar';\nimport Alert from \"@material-ui/lab/Alert\";\n\nfunction App() {\n    const snackbar = useSelector((state: RootState) => state.snackbar)\n    console.log(snackbar);\n    const dispatch = useDispatch();\n\n  return (\n      <div className=\"app-root\">\n          <Button color={\"primary\"} variant={\"outlined\"} onClick={() => {\n              dispatch(show({\n                  severity: 'warning',\n                  message: 'hello'\n              }));\n          }}>Save</Button>\n          <Button color={\"secondary\"} onClick={() => {\n              dispatch(show({\n                  severity: 'info',\n                  message: 'welcome'\n              }));\n          }}>cancel</Button>\n\n          <Snackbar\n              open={snackbar.show}\n              anchorOrigin={{ vertical: 'top',\n                  horizontal: 'center' }}\n              autoHideDuration={6000} onClose={() => {hide()}}>\n              <Alert\n                  severity={snackbar.severity}\n                  onClose={() => {hide()}}>\n                  {snackbar.message}\n              </Alert>\n          </Snackbar>\n\n\n      </div>\n  );\n}\n\nexport default App;\n","import {createTheme} from \"@material-ui/core\";\n\nexport const theme = createTheme({\n    typography: {\n        button: {\n            textTransform: 'none',\n            fontFamily: 'SourceSansPro'\n        }\n    },\n    palette: {\n        primary: {\n            main: '#4527A0'\n        },\n        secondary: {\n            main: '#AD1457'\n        }\n    }\n});","import { configureStore } from '@reduxjs/toolkit';\nimport snackbarReducer from './actions/snackbar';\n\nexport const store = configureStore({\n    reducer: {\n        snackbar: snackbarReducer\n    },\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport {MuiThemeProvider} from \"@material-ui/core\";\nimport {theme} from \"./utils/theme\";\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <MuiThemeProvider theme={theme}>\n              <App />\n          </MuiThemeProvider>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}